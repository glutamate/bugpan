module Test where

myfun :: a -> b -> c
myfun = x+f y

bar = map foo myList

smap ::  (a->b) -> Signal a -> Signal b

mysig = switch
           e ~> z
           _ ~> \_->fbaz


infixr 2 +
infixr 2 -
infixl 5 *
infixl 5 /
prefix 3 -
infix 6 >

foo = let x = 5
      	  y = let z = 6
	      	  w = 7
              in z+w
      in x+y

bar = case foo of
         4 -> 53
         _ -> 12

baz = if 2+3>1
      	 then 3*6
	 else exp 4

x= 5

y= 1-4

z = -1*5.2e-3

w =   {: (-v *<: sig :> +4 ) :}

u! = {: (v * <: gcell :> + (tonicInhib*v) - ((v-vrest)/rin))/cm :} 

xyz *> dac ()

cellOde = \v->{: (v *<: gcell :> + (tonicInhib*v) - ((v-vrest)/rin))/cm :} 

--i have a new extra bedtime rule
--no talking after lights out
