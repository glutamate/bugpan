module Nats where

data Nat = Z | S Nat

data Int = P Nat | N Nat

data Bool = True | False

data [a] = a:[a] | []

infixl 5 _+_

_ + _ : Nat -> Nat -> Nat
Z + m = m
(S p) + m = p + S m

one = S Z
two = S one
three = S two
incr n = S n 

x = two + two


+ : Plus a => a -> a -> a 
x + y = plus a x y

Plus : Set -> Bool
Plus Nat = T

plus : Plus a => (t:Set) -> (a:t) -> a -> a
plus Nat x y = 

