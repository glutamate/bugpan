module Simple where 


--incr :: Num -> Num
incr x =  x+1

--add :: Num -> Num -> Num
--add x y = x+y

--val = incr 3

id x = x
myInt = id 3

myBool = id true

min = \x->\y->if x > y then y else x
max = \x->\y->if x < y then y else x

--fst :: (a,b) -> a
fst = \pr->case pr of (x,_) -> x
snd = \pr->case pr of (_,x) -> x

myCons x xs = x:xs

val1 = let x = 2 in x+2

mySig = {: <: {: val1 :} :> :}

mySigVal = mySig @ (0.0)

smap f s=  {: f <: s :> :} 

crosses val sig = [: if (<:  sig :> >= val) && (<: delay sig 0 :> < val) then [ (<: seconds :>, ()) ] else [] :]

evExpr = (0.0, ())

uExpr = ()