module Test where

alpha tau t = if t<0.0 then 0.0 else (t/tau)*exp (1-t/tau)

gampa = 5.0e-10

gsyn = {: gampa* (alpha 0.005 <: seconds:>) :}

stage gsyn -1		

rate = 50

_tmax = 2
_dt = 1.0e-4

gcell = {: convolution gsyn (forget 0.1 rndSpike ) <:seconds:> :}

rawv :: Signal Real
celli :: Signal Real

rawv <* ADC 0

vm = {: <: rawv:>  *0.10 :}

gmaxk = 0

vm :: Signal Real
a :: Signal Real
b :: Signal Real

ika :: Signal Real
ika = {: gmaxk * <:a:> * <:b:>*(0.08+<:vm:>) :}
ika_0 = 0

D a = {: 1000*(((alphaa ((<: vm:>*1000)+60))* ( 1-<:a:>)) -
              ((betaa ((<:vm:>*1000)+60)) * <: a :>)) :}
a_0 = 0.025

D b = {: 1000*(((alphab ((<: vm:>*1000)+60)) * ( 1-<:b:>)) -
              ((betab ((<:vm:>*1000)+60)) * <: b :>)) :}
b_0 = 0.9

alphaa :: Real -> Real
betaa :: Real -> Real
alphab :: Real -> Real
betab :: Real -> Real

alphaa v = (0.02*(13.1-v))/((exp ((13.1 -v)/10)) -1)
betaa v =  (0.0175*(v-40.1))/((exp ((v-40.1)/10))-1)

alphab v = 0.0016*exp((0-13-v)/18)
betab v = 0.05/(1+(exp((10.1-v)/5)))

celli = {: (0-<:vm:>) * <:gcell:> - <: ika:> :}

outv = {: <:celli:> * 1.0e8 :} 

outv *> DAC 0

celli *> store ""

gcell *> store ""

gsyn *> store ""

vm *> store ""

rndSpike :: [(Real, ())]
rndSpike <* poisson rate
