module Intfire where

{-
date && runbugpan  -r AdaExpIf.bug
-}

use Prelude

rate = 200

cm = 2.81e-10
gl = 3.0e-8
el = -0.0706
vt = -0.0504
slopefac = 0.002
tauw = 0.144
a = 4.0e-9
b = 8.05e-11
gsynmul = 1.0e-12




_dt = 4.0e-5
_tmax= 10

alpha tau t = if t<0.0 then 0.0 else tau*tau*t*(exp (-t*tau)) 

rndSpike :: [(Real, ())]
rndSpike <* poisson rate

gsyn = {: gsynmul * (alpha 1485 <: seconds:>) #0.02:}

stage gsyn -1

gexc :: Signal Real
gexc = (convolve gsyn) (forget 0.02 rndSpike )


cellOde :: Real -> Signal Real
cellOde = \v-> {: (gl*slopefac*exp((v -vt)/slopefac) - gl*(v-el)- <: gexc :>*(v-0) - <: w :> )/cm :} 

vm :: Signal Real
vm = switch 
	    S cellOde el -- cellOde v in v
	    spike ~> \tsp->\_-> solveOdeFrom (tsp+dt) cellOde el

wOde w' = {: a*(<: vm :> - el) - w'  :}

w :: Signal Real
w = switch 
	    solveOde wOde 0
	    spike ~> \tsp->\_-> solveOdeFrom (tsp+dt) wOde (wlast+b) -- let D ws = (ws+b) fby wOde in  ws 

wlast ::  Signal Real
wlast = delay w 0

spike :: [(Real, ())]
spike = crosses 0.02 vm 

spikeP1 = later dt spike

--inputRate *> store ""

--secs = {: <: seconds :> :}

--gsyn *> store ""
--gcell *> store ""
--vm *> print ()
vm *> store ""
w *> store ""
--secs *> store ""
--vmpassive *> store ""
--incrsig *> store ""
spike *> store ""
--refrac_end *> store ""
--spike *> print ()
--rndSpike *> store ""

