module Intfire where

{-
date && runbugpan  -r AdaExpIf.bug
-}

use Prelude

rate = 200

cm = 2.81e-10
gl = 3.0e-8
el = -0.0706
vr = -0.0706
vt = -0.0504
slopefac = 0.002
tauw = 0.144
a = 4.0e-9
b = 8.05e-11
gsynmul = 2.0e-11

_dt = 5.0e-6
_tmax= 1

alpha tau t = if t<0.0 then 0.0 else tau*tau*t*(exp (-t*tau)) 

rndSpike :: [(Real, ())]
rndSpike <* poisson rate

gsyn = {: gsynmul * (alpha 1485 <: seconds:>) :}

stage gsyn -1

gexc :: Signal Real
gexc = (convolve gsyn) (forget 0.02 rndSpike )

--vm_0 = vr
w :: Signal Real
w = {: let dvm = <: delay vm vr :> 
           dw =  <: delay w 0 :> 
       in if (dvm >= 0.02) 
          then (b+dw)
          else ((a*(dvm - el)) - dw ) :}

vm :: Signal Real
vm =  ({: let dl = <: delay vm vr :> 
          in if (dl >= 0.02)
                  then vr
	          else (dl + dt * ( {: (((gl*slopefac)*exp((dl -vt)/slopefac)) - gl*(dl-el)- <: gexc :>*(dl - 0) - <: w :>  )/cm :})) :})

{-vmOde :: Real -> Signal Real
vmOde = \v'-> {: (((gl*slopefac)*exp((v' -vt)/slopefac)) - gl*(v'-el)- <: gexc :>*(v'-0) - <: w :>  )/cm :} 

vm = switch 
	    let D vms = vr fby ({: (((gl*slopefac)*exp((<: vms :> -vt)/slopefac)) - gl*(<: vms :>-el)- <: gexc :>*(<: vms :>-0) - <: w :>  )/cm :}) in vms
	    spike ~> \tsp->\_-> (let D vms = vr fby ({: (0 - gl*(<: vms :>-el)- <: gexc :>*(<: vms :>-0)- <: w :> )/cm :}) in vms)
-}
--solveOdeFrom (tsp+dt) vmOde vr




{-w = switch 
	    let D ws = 0 fby ({: a*(<: delay vm vr :> - el) - <:ws:> :}) in  ws
	    spike ~> \tsp->\_-> ( let D ws = (0+b) fby ({: (a*(<: vm :> - el) - <:ws:>)/tauw :}) in  ws )
-}

spike :: [(Real, ())]
spike = -- (\(v,w)->v>0.02) ? ({: (<:vm:>,<:w:>) :} )

         [: if (<: vm :> >= 0.02) && (<: delay vm vr :> < 0.02)
               then [ (<: seconds :>, () ) ] 
               else [] :]

--spikeP1 = later dt spike

--inputRate *> store ""

--secs = {: <: seconds :> :}

gexc *> store ""
--gcell *> store ""
--vm *> print ()
vm *> store ""
w *> store ""
--secs *> store ""
--vmpassive *> store ""
--incrsig *> store ""
spike *> store ""
--refrac_end *> store ""
--spike *> store ""
--rndSpike *> store ""

