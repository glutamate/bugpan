module Prelude where 

--smap :: (a->b) -> (Signal a) -> (Signal b)
smap f s=  {: f <: s :> :} 

--incr :: Number -> Number
incr x =  x+1

--add :: Number -> Number -> Number
add x y = x+y

negate x = 0-x

--constSig :: a -> Signal a
constSig x = {: x :}

--sigPlus1 : (Signal Number) -> (Signal Number)
sigPlus1 = smap incr

--sigAtZero :: (Signal Number) -> Number
sigAtZero s = s@0

--sscan :: (a->b->a) -> a -> (Signal b) -> (Signal b)
sscan f v0 s = let sr = {: (f <: s :>) <: delay sr v0 :> :} in sr

intStep = \new->\old->old+new*dt

integrate = sscan intStep 0
crosses val sig = [: if (<: sig :> >= val) && (<: delay sig 0 :> < val) 
                        then [ (<: seconds :>, ()) ] 
                        else [] :]
eventIf p = [: if p  then [ (<: seconds :>, ()) ] else [] :]
fraction = \x->x-floor x
every = \ivl->eventIf ((fraction (<: seconds :>/ivl)) < dt)

zip s1 s2 = {: (<: s1 :>, <: s2 :>) :}
zipWith f s1 s2 = {:  f <: s1 :> <: s2 :> :}

{-peak sig = let sigpeak = sscan peakf (sig@0, 0) (zip sig seconds)
     	       (peakval, peakt) = sigpeak@tmax
	   in [(peakt, peakval)]
peakf (new,tnew) (old,told) = if new>old 
      		 	         then (new, tnew) 
				 else (old, told)
-}


map f lst = case lst of 
      	    	 [] -> []
		 x:xs -> f x:(map f xs)

sum lst = case lst of 
      	   [] -> 0
	   (x:xs) -> x+(sum xs)

eventsAfter tm evs = case evs of 
	     	      	   ((tev,x):evvs) -> if tev < tm
			   		        then (tev,x):(eventsAfter tm evvs)
						else []
			   _ -> []
						
 
fst = \pr->case pr of (x,_) -> x
snd = \pr->case pr of (_,x) -> x

min = \x->\y->if x > y then y else x
max = \x->\y->if x < y then y else x
enow = \es->((enowAux <: seconds :>) dt) es
emap = \f->\evs->[: (map f) (enow evs) :]
convolve s evs = {: case evs of {
                        ((tev,_):evvs) -> if tev < sigTmax s
                                            then (s@(<: seconds :>-tev))+(convolve s evvs)
                                            else 0 ;
                        _ -> 0 } :}

laterF = \t->\e->((fst e)+t, snd e)
later = \t->\es->(emap (laterF t)) es
iterate f s0 = let s = {: if <: seconds :> <= (dt/2) 
	       	       	     then s0 
			     else (f <: delay s s0 :>) :}
	        in s
iterateFrom = \t0->\f->\s0->let s = {: if <: seconds :> <= (t0+(dt/2)) 
	      			          then s0 
                                          else (f <: delay s s0 :>) :} 
                            in s
solveStep = \sf->\v0->\old->old+(<: delay (sf old) v0 :>*dt)
solveOde = \sf->\v0->(iterate ((solveStep sf) v0)) v0
solveOdeFrom = \t0->\sf->\v0->((iterateFrom t0) ((solveStep sf) v0)) v0

cube l = translate (-l/2.0, -l/2.0, 0) (box (l, l, l))
black = (0.0, 0.0, 0.0)
green = (0.0, 1.0, 0.0)

