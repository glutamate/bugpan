module Intfire where

use Prelude -- { vm => 0.07, rm => 1e9 };

rate = 100

alpha tau t = if t<0 then 0 else tau*tau*t*(exp (-t*tau)) 

rndSpikeSig <* "uniform 0 1"
rndSpike = eventIf (<: rndSpikeSig :> < rate*dt)

gsyn = smap (alpha 300) seconds

stage gsyn -1

gcell = (convolve gsyn) rndSpike 
cellOde = \v->{: ((<: gcell :>*3.0e-13)-((v+7.0e-2)/1.00e9))/2.5e-12 :} 
vm = switch 
	    solveOde cellOde (-7.0e-2)
	    spike ~> \_->\_->{: -7.0e-2 :}
	    refrac_end ~> \tsp->\_-> solveOdeFrom (tsp+dt) cellOde (-7.0e-2)

spike = crosses (-4.0e-2) vm
refrac_end = later 2.0e-3 spike

inputRate = [(0,tmax,rate)]
inputRate *> "store"

--vm *> "print"
vm *> "store"
spike *> "store"
--spike *> "print"
