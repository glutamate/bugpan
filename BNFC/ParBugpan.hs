{-# OPTIONS_GHC -fno-warn-overlapping-patterns #-}
{-# OPTIONS -fglasgow-exts -cpp #-}
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module BNFC.ParBugpan where
import BNFC.AbsBugpan
import BNFC.LexBugpan
import BNFC.ErrM
#if __GLASGOW_HASKELL__ >= 503
import qualified Data.Array as Happy_Data_Array
#else
import qualified Array as Happy_Data_Array
#endif
#if __GLASGOW_HASKELL__ >= 503
import qualified GHC.Exts as Happy_GHC_Exts
#else
import qualified GlaExts as Happy_GHC_Exts
#endif

-- parser produced by Happy Version 1.18.4

newtype HappyAbsSyn  = HappyAbsSyn HappyAny
#if __GLASGOW_HASKELL__ >= 607
type HappyAny = Happy_GHC_Exts.Any
#else
type HappyAny = forall a . a
#endif
happyIn30 :: (Integer) -> (HappyAbsSyn )
happyIn30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn30 #-}
happyOut30 :: (HappyAbsSyn ) -> (Integer)
happyOut30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut30 #-}
happyIn31 :: (Double) -> (HappyAbsSyn )
happyIn31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn31 #-}
happyOut31 :: (HappyAbsSyn ) -> (Double)
happyOut31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut31 #-}
happyIn32 :: (String) -> (HappyAbsSyn )
happyIn32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn32 #-}
happyOut32 :: (HappyAbsSyn ) -> (String)
happyOut32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut32 #-}
happyIn33 :: (BIdent) -> (HappyAbsSyn )
happyIn33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn33 #-}
happyOut33 :: (HappyAbsSyn ) -> (BIdent)
happyOut33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut33 #-}
happyIn34 :: (Program) -> (HappyAbsSyn )
happyIn34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn34 #-}
happyOut34 :: (HappyAbsSyn ) -> (Program)
happyOut34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut34 #-}
happyIn35 :: (Declare) -> (HappyAbsSyn )
happyIn35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn35 #-}
happyOut35 :: (HappyAbsSyn ) -> (Declare)
happyOut35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut35 #-}
happyIn36 :: (Exp) -> (HappyAbsSyn )
happyIn36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn36 #-}
happyOut36 :: (HappyAbsSyn ) -> (Exp)
happyOut36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut36 #-}
happyIn37 :: (Exp) -> (HappyAbsSyn )
happyIn37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn37 #-}
happyOut37 :: (HappyAbsSyn ) -> (Exp)
happyOut37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut37 #-}
happyIn38 :: (Exp) -> (HappyAbsSyn )
happyIn38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn38 #-}
happyOut38 :: (HappyAbsSyn ) -> (Exp)
happyOut38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut38 #-}
happyIn39 :: (Exp) -> (HappyAbsSyn )
happyIn39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn39 #-}
happyOut39 :: (HappyAbsSyn ) -> (Exp)
happyOut39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut39 #-}
happyIn40 :: (Exp) -> (HappyAbsSyn )
happyIn40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn40 #-}
happyOut40 :: (HappyAbsSyn ) -> (Exp)
happyOut40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut40 #-}
happyIn41 :: (Exp) -> (HappyAbsSyn )
happyIn41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn41 #-}
happyOut41 :: (HappyAbsSyn ) -> (Exp)
happyOut41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut41 #-}
happyIn42 :: (Exp) -> (HappyAbsSyn )
happyIn42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn42 #-}
happyOut42 :: (HappyAbsSyn ) -> (Exp)
happyOut42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut42 #-}
happyIn43 :: (SwitchLine) -> (HappyAbsSyn )
happyIn43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn43 #-}
happyOut43 :: (HappyAbsSyn ) -> (SwitchLine)
happyOut43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut43 #-}
happyIn44 :: (CaseLine) -> (HappyAbsSyn )
happyIn44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn44 #-}
happyOut44 :: (HappyAbsSyn ) -> (CaseLine)
happyOut44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut44 #-}
happyIn45 :: (Arg) -> (HappyAbsSyn )
happyIn45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn45 #-}
happyOut45 :: (HappyAbsSyn ) -> (Arg)
happyOut45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut45 #-}
happyIn46 :: (ImpSubstLine) -> (HappyAbsSyn )
happyIn46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn46 #-}
happyOut46 :: (HappyAbsSyn ) -> (ImpSubstLine)
happyOut46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut46 #-}
happyIn47 :: (Pat) -> (HappyAbsSyn )
happyIn47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn47 #-}
happyOut47 :: (HappyAbsSyn ) -> (Pat)
happyOut47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut47 #-}
happyIn48 :: (Pat) -> (HappyAbsSyn )
happyIn48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn48 #-}
happyOut48 :: (HappyAbsSyn ) -> (Pat)
happyOut48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut48 #-}
happyIn49 :: (Const) -> (HappyAbsSyn )
happyIn49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn49 #-}
happyOut49 :: (HappyAbsSyn ) -> (Const)
happyOut49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut49 #-}
happyIn50 :: (Type) -> (HappyAbsSyn )
happyIn50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn50 #-}
happyOut50 :: (HappyAbsSyn ) -> (Type)
happyOut50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut50 #-}
happyIn51 :: (Type) -> (HappyAbsSyn )
happyIn51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn51 #-}
happyOut51 :: (HappyAbsSyn ) -> (Type)
happyOut51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut51 #-}
happyIn52 :: (CmpOp) -> (HappyAbsSyn )
happyIn52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn52 #-}
happyOut52 :: (HappyAbsSyn ) -> (CmpOp)
happyOut52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut52 #-}
happyIn53 :: (Type) -> (HappyAbsSyn )
happyIn53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn53 #-}
happyOut53 :: (HappyAbsSyn ) -> (Type)
happyOut53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut53 #-}
happyIn54 :: ([Declare]) -> (HappyAbsSyn )
happyIn54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn54 #-}
happyOut54 :: (HappyAbsSyn ) -> ([Declare])
happyOut54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut54 #-}
happyIn55 :: ([SwitchLine]) -> (HappyAbsSyn )
happyIn55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn55 #-}
happyOut55 :: (HappyAbsSyn ) -> ([SwitchLine])
happyOut55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut55 #-}
happyIn56 :: ([CaseLine]) -> (HappyAbsSyn )
happyIn56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn56 #-}
happyOut56 :: (HappyAbsSyn ) -> ([CaseLine])
happyOut56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut56 #-}
happyIn57 :: ([Exp]) -> (HappyAbsSyn )
happyIn57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn57 #-}
happyOut57 :: (HappyAbsSyn ) -> ([Exp])
happyOut57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut57 #-}
happyIn58 :: ([BIdent]) -> (HappyAbsSyn )
happyIn58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn58 #-}
happyOut58 :: (HappyAbsSyn ) -> ([BIdent])
happyOut58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut58 #-}
happyIn59 :: ([Arg]) -> (HappyAbsSyn )
happyIn59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn59 #-}
happyOut59 :: (HappyAbsSyn ) -> ([Arg])
happyOut59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut59 #-}
happyIn60 :: ([ImpSubstLine]) -> (HappyAbsSyn )
happyIn60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn60 #-}
happyOut60 :: (HappyAbsSyn ) -> ([ImpSubstLine])
happyOut60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut60 #-}
happyInTok :: (Token) -> (HappyAbsSyn )
happyInTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyInTok #-}
happyOutTok :: (HappyAbsSyn ) -> (Token)
happyOutTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOutTok #-}


happyActOffsets :: HappyAddr
happyActOffsets = HappyA# "\x6f\x01\x5e\x01\x82\x02\x21\x03\x3a\x02\xea\x03\xc1\x01\xf1\x01\x21\x03\xf1\x01\x11\x04\x58\x02\x52\x01\x58\x02\x11\x04\x4f\x00\x28\x04\x13\x04\xbd\x08\x13\x04\x5e\x01\xf1\x01\x11\x04\xf1\x01\x52\x01\x00\x00\x52\x01\x54\x01\x00\x00\x7d\x01\x8a\x01\x43\x01\x00\x00\xa0\x00\x67\x01\x3d\x01\x00\x00\x00\x00\x00\x00\x00\x00\x7e\x00\x47\x01\x42\x04\x00\x00\x00\x00\x88\x00\xea\x03\x00\x00\x3d\x01\x82\x02\x11\x04\x21\x03\xf1\x01\x00\x00\xf1\x01\xf1\x01\xf1\x01\xf1\x01\x00\x00\x21\x03\x21\x03\xf1\x01\x21\x03\x21\x03\x21\x03\xf1\x01\x00\x00\x21\x03\xf1\x01\xf1\x01\x8f\x01\xf1\x01\xf1\x01\x7e\x01\x21\x03\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x01\x00\x00\x5f\x02\x00\x00\x36\x01\x11\x04\x00\x00\x00\x00\x11\x04\x8d\x00\x5a\x01\x25\x01\x1c\x00\x56\x01\x17\x00\xac\x01\x0f\x01\x23\x01\x22\x01\xa8\x01\xbe\x00\xde\x02\x11\x04\x22\x01\x22\x01\x00\x00\x63\x01\x00\x00\x1b\x01\x13\x04\x13\x04\x00\x00\x00\x00\x28\x04\x28\x04\x00\x00\x00\x00\x00\x00\x00\x00\x13\x04\x1b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x1b\x01\x1b\x01\xff\xff\x1b\x01\x1b\x01\x1b\x01\x00\x00\x1b\x01\x1b\x01\x9b\x02\xeb\xff\x1b\x01\xf1\x01\x1b\x01\x19\x01\xf8\xff\x0e\x00\x1b\x01\x1b\x01\x14\x01\x1a\x01\x21\x03\x21\x03\x21\x03\x21\x03\x21\x03\x21\x03\x21\x03\x21\x03\x82\x02\x82\x02\x82\x02\x00\x01\xf1\x01\x00\x00\x11\x04\x00\x00\x11\x04\x00\x00\x00\x00\x00\x00\x46\x01\x9a\x00\x13\x04\x66\x01\x03\x00\x4f\x01\x6d\x00\x47\x01\xb6\x01\x29\x01\xb6\x02\xf1\x01\xfe\xff\xf1\x01\x03\x01\x5e\x01\x13\x04\x03\x01\xf1\x01\xf1\x01\xf1\x01\x11\x04\xea\x03\xf1\x01\x3a\x01\x3a\x01\x5e\x01\x3a\x01\xf2\xff\xea\x03\x3a\x01\xea\x03\xea\x03\xea\x03\xec\xff\xea\x03\x29\x00\xf1\xff\xe4\x00\x37\x01\x47\x01\x5c\x01\x7e\x00\xf1\x01\xf3\x00\x00\x00\xf3\x00\xf1\x01\x28\x01\x00\x00\x00\x00\x00\x00\xf1\x01\x00\x00\x00\x00\xf1\x01\x00\x00\x00\x00\x33\x01\xc6\x03\xa7\x03\x83\x03\x64\x03\xf1\x01\x2e\x01\xfb\xff\x40\x03\x00\x00\x18\x01\x18\x01\x00\x00\xf1\x01\x00\x00\x00\x00\xf1\x01\x18\x01\xf1\x01\x18\x01\x11\x04\x00\x00\xf1\x01\x00\x00\xf1\x01\x00\x00\xd5\x00\xcb\x00\x00\x00\x13\x04\x00\x00\x00\x00\xb6\x01\xb6\x01\x01\x01\x7e\x00\x7e\x00\x7e\x00\xfd\x02\xfd\x02\xfd\x02\x47\x01\x47\x01\x47\x01\x47\x01\x47\x01\x0e\x01\x5e\x01\x23\x00\x0c\x01\x00\x00\xf0\xff\xc3\x00\xc8\x01\xf0\x00\xf0\x00\xf0\x00\xf1\x01\xc7\x00\xf5\xff\x11\x04\xfc\xff\xe3\x00\x00\x00\xf7\x00\xf1\x01\xf1\x01\xea\x00\x00\x00\xf1\x01\x00\x00\xe2\x00\x00\x00\x13\x04\x00\x00\xdc\x00\x00\x00\xba\x00\x5e\x01\xef\x00\x00\x00\xc2\x00\xc2\x00\x00\x00\x00\x00\xbb\x00\x00\x00\x00\x00\x00\x00"#

happyGotoOffsets :: HappyAddr
happyGotoOffsets = HappyA# "\x97\x00\x6b\x05\x69\x07\xc4\x07\x23\x07\xc9\x08\xe1\x08\x15\x07\x39\x08\x5c\x02\xa7\x00\xc5\x08\x7b\x00\xcd\x08\xb1\x08\x60\x00\x54\x00\xee\x00\xae\x00\x1e\x01\x57\x05\xf2\x04\xb5\x04\x8c\x04\x1a\x00\x95\x00\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\xa6\x08\x00\x00\x00\x00\x5b\x07\x92\x08\xb7\x07\x07\x07\x00\x00\x7e\x04\xf9\x06\xeb\x06\xdd\x06\x00\x00\xaa\x07\x2c\x08\xcf\x06\x1f\x08\x12\x08\x05\x08\xc1\x06\x00\x00\xf8\x07\xb3\x06\xa5\x06\x00\x00\x97\x06\x89\x06\x00\x00\xeb\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x08\x00\x00\x00\x00\x89\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x75\x00\x00\x00\x00\x00\x8a\x00\x80\x01\x00\x00\xc9\x01\x85\x08\x85\x00\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x01\xf5\x00\x00\x00\x00\x00\x37\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x08\x00\x00\x00\x00\x7b\x06\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x00\x00\x9d\x07\x90\x07\x83\x07\x76\x07\xff\x02\xde\x07\xd1\x07\x1a\x02\x4d\x07\x3f\x07\x31\x07\x00\x00\x6d\x06\x00\x00\x1d\x04\x00\x00\xa3\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x72\x00\x00\x00\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5f\x06\xe6\x02\x51\x06\x5b\x00\x43\x05\xcd\x00\x5a\x00\xde\x04\x43\x06\x35\x06\xa0\x04\x6f\x08\x27\x06\x00\x00\x00\x00\x2f\x05\x00\x00\x00\x00\x6b\x08\x00\x00\x60\x08\x55\x08\x51\x08\x00\x00\x46\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x04\x18\x00\x00\x00\x49\x00\x19\x06\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x06\x00\x00\x00\x00\xfd\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe1\x05\x00\x00\x00\x00\xd3\x05\x00\x00\xc5\x05\x00\x00\x49\x01\x00\x00\xb7\x05\x00\x00\xa9\x05\x00\x00\x3c\x00\x08\x00\x00\x00\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbb\x04\xbb\x04\xbb\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\x04\x00\x00\x00\x00\x9a\x04\x00\x00\x00\x00\x00\x00\x00\x00\x9b\x05\x8d\x05\x00\x00\x00\x00\x7f\x05\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyDefActions :: HappyAddr
happyDefActions = HappyA# "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78\xff\x75\xff\x72\xff\x6f\xff\x6c\xff\x69\xff\x67\xff\x00\x00\xe4\xff\x00\x00\x66\xff\x00\x00\xe1\xff\x00\x00\x6b\xff\x00\x00\x95\xff\x94\xff\x90\xff\xb9\xff\xc1\xff\xcc\xff\xb0\xff\xa5\xff\xbb\xff\x6e\xff\xc8\xff\xba\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\xff\x6f\xff\x00\x00\x00\x00\x00\x00\x93\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x91\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\xff\xe3\xff\xe2\xff\xa0\xff\x71\xff\x96\xff\x00\x00\x9e\xff\x00\x00\x00\x00\x9c\xff\x9f\xff\x00\x00\x00\x00\x74\xff\x00\x00\xa0\xff\x77\xff\x00\x00\x69\xff\x9e\xff\x00\x00\x00\x00\x00\x00\x9c\xff\x00\x00\x00\x00\x00\x00\x00\x00\x85\xff\x80\xff\x79\xff\x00\x00\x00\x00\x00\x00\x8f\xff\x89\xff\x00\x00\x00\x00\x8a\xff\x8c\xff\x8b\xff\x88\xff\x00\x00\x00\x00\x7f\xff\x7e\xff\x7d\xff\x7c\xff\x7b\xff\x7a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa2\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaf\xff\x00\x00\x97\xff\x00\x00\x87\xff\x82\xff\x81\xff\x00\x00\x00\x00\x00\x00\xde\xff\x00\x00\x00\x00\xa0\xff\xcf\xff\x98\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78\xff\x00\x00\x00\x00\x75\xff\x00\x00\x00\x00\x72\xff\x00\x00\x00\x00\xbe\xff\xbf\xff\x78\xff\xbd\xff\x00\x00\x00\x00\xc0\xff\x00\x00\x00\x00\x00\x00\x00\x00\xbc\xff\x00\x00\x00\x00\x00\x00\x00\x00\xd2\xff\x00\x00\xc7\xff\x6f\xff\x6c\xff\x68\xff\x67\xff\x00\x00\xa1\xff\x65\xff\x6a\xff\x6d\xff\x00\x00\xac\xff\xc3\xff\x00\x00\xb7\xff\xaa\xff\x00\x00\xa6\xff\xab\xff\xa9\xff\xa8\xff\x00\x00\x00\x00\x00\x00\xa7\xff\x70\xff\xa3\xff\xa4\xff\x73\xff\x00\x00\xdc\xff\x76\xff\x00\x00\xd6\xff\x00\x00\xd5\xff\x00\x00\x9b\xff\x00\x00\xb6\xff\x00\x00\xd9\xff\x00\x00\x67\xff\x83\xff\x00\x00\x84\xff\x86\xff\x9a\xff\x99\xff\xb4\xff\xc5\xff\xc6\xff\xc4\xff\xc9\xff\xca\xff\xcb\xff\xce\xff\xcd\xff\xd0\xff\xd4\xff\xd3\xff\x00\x00\x78\xff\x00\x00\x00\x00\xd8\xff\x00\x00\x00\x00\x00\x00\xdf\xff\xdb\xff\xda\xff\x75\xff\x00\x00\x00\x00\x72\xff\x00\x00\xd1\xff\xc2\xff\x00\x00\x00\x00\x00\x00\x00\x00\x9d\xff\x00\x00\xae\xff\x00\x00\xdd\xff\x00\x00\x8e\xff\x00\x00\xe0\xff\x00\x00\x78\xff\x00\x00\xb3\xff\xb2\xff\xb5\xff\xb1\xff\xad\xff\x00\x00\x8d\xff\xd7\xff"#

happyCheck :: HappyAddr
happyCheck = HappyA# "\xff\xff\x03\x00\x17\x00\x17\x00\x0c\x00\x0d\x00\x0e\x00\x17\x00\x17\x00\x17\x00\x07\x00\x03\x00\x17\x00\x0e\x00\x03\x00\x1e\x00\x11\x00\x13\x00\x17\x00\x17\x00\x16\x00\x07\x00\x17\x00\x1b\x00\x10\x00\x0b\x00\x16\x00\x03\x00\x05\x00\x03\x00\x23\x00\x14\x00\x04\x00\x05\x00\x06\x00\x07\x00\x26\x00\x27\x00\x1e\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x1f\x00\x17\x00\x13\x00\x22\x00\x3c\x00\x16\x00\x17\x00\x1c\x00\x49\x00\x1c\x00\x14\x00\x15\x00\x1d\x00\x03\x00\x1f\x00\x00\x00\x3f\x00\x22\x00\x4d\x00\x17\x00\x51\x00\x57\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x21\x00\x14\x00\x03\x00\x4f\x00\x40\x00\x57\x00\x52\x00\x53\x00\x54\x00\x55\x00\x38\x00\x52\x00\x57\x00\x03\x00\x03\x00\x10\x00\x3e\x00\x3f\x00\x40\x00\x03\x00\x03\x00\x43\x00\x00\x00\x01\x00\x02\x00\x47\x00\x00\x00\x57\x00\x4a\x00\x1e\x00\x14\x00\x14\x00\x15\x00\x4f\x00\x17\x00\x03\x00\x52\x00\x53\x00\x54\x00\x55\x00\x05\x00\x13\x00\x07\x00\x03\x00\x27\x00\x03\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x03\x00\x03\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x07\x00\x14\x00\x15\x00\x03\x00\x0b\x00\x1d\x00\x10\x00\x1f\x00\x03\x00\x3f\x00\x22\x00\x14\x00\x15\x00\x1d\x00\x17\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x04\x00\x14\x00\x1f\x00\x4f\x00\x17\x00\x22\x00\x52\x00\x53\x00\x54\x00\x17\x00\x38\x00\x16\x00\x00\x00\x01\x00\x02\x00\x03\x00\x3e\x00\x3f\x00\x40\x00\x14\x00\x15\x00\x43\x00\x24\x00\x1d\x00\x13\x00\x47\x00\x0e\x00\x16\x00\x4a\x00\x11\x00\x12\x00\x13\x00\x03\x00\x4f\x00\x02\x00\x40\x00\x52\x00\x53\x00\x54\x00\x55\x00\x05\x00\x16\x00\x07\x00\x26\x00\x27\x00\x10\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x15\x00\x03\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x1e\x00\x14\x00\x15\x00\x17\x00\x17\x00\x1d\x00\x03\x00\x1f\x00\x02\x00\x3f\x00\x22\x00\x14\x00\x15\x00\x01\x00\x17\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x02\x00\x14\x00\x15\x00\x4f\x00\x17\x00\x03\x00\x52\x00\x53\x00\x54\x00\x55\x00\x38\x00\x57\x00\x03\x00\x02\x00\x17\x00\x17\x00\x3e\x00\x3f\x00\x40\x00\x1b\x00\x1c\x00\x43\x00\x14\x00\x15\x00\x15\x00\x47\x00\x17\x00\x17\x00\x4a\x00\x14\x00\x15\x00\x44\x00\x17\x00\x4f\x00\x02\x00\x01\x00\x52\x00\x53\x00\x54\x00\x55\x00\x05\x00\x15\x00\x07\x00\x17\x00\x17\x00\x03\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x55\x00\x03\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x52\x00\x0f\x00\x10\x00\x14\x00\x15\x00\x1d\x00\x17\x00\x1f\x00\x17\x00\x02\x00\x22\x00\x14\x00\x15\x00\x01\x00\x17\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x14\x00\x15\x00\x17\x00\x17\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x38\x00\x55\x00\x00\x00\x01\x00\x02\x00\x03\x00\x3e\x00\x3f\x00\x40\x00\x19\x00\x17\x00\x43\x00\x0c\x00\x0d\x00\x0e\x00\x47\x00\x08\x00\x55\x00\x4a\x00\x11\x00\x12\x00\x13\x00\x0e\x00\x4f\x00\x19\x00\x11\x00\x52\x00\x53\x00\x54\x00\x55\x00\x07\x00\x17\x00\x01\x00\x0a\x00\x55\x00\x0e\x00\x51\x00\x0e\x00\x11\x00\x12\x00\x11\x00\x57\x00\x13\x00\x57\x00\x17\x00\x16\x00\x12\x00\x18\x00\x55\x00\x1a\x00\x23\x00\x57\x00\x1d\x00\x57\x00\x23\x00\x20\x00\x01\x00\x00\x00\x01\x00\x02\x00\x03\x00\x26\x00\x27\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x57\x00\x30\x00\x23\x00\x01\x00\x11\x00\x12\x00\x13\x00\x57\x00\x2e\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x57\x00\x3d\x00\x3e\x00\x3f\x00\x14\x00\x41\x00\x42\x00\x43\x00\x25\x00\x45\x00\x46\x00\x47\x00\x52\x00\x55\x00\x4a\x00\x4b\x00\x4c\x00\xff\xff\x4e\x00\x4f\x00\x50\x00\x07\x00\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x09\x00\x0e\x00\x48\x00\xff\xff\x11\x00\x0e\x00\x13\x00\xff\xff\x11\x00\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\x17\x00\x0e\x00\x1d\x00\xff\xff\x11\x00\x20\x00\x00\x00\x01\x00\x02\x00\x03\x00\x17\x00\x26\x00\x27\x00\x07\x00\xff\xff\x09\x00\x0a\x00\x13\x00\x0c\x00\x0e\x00\x16\x00\x30\x00\x11\x00\x11\x00\x12\x00\x13\x00\x15\x00\x1d\x00\x17\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x27\x00\x41\x00\x42\x00\x43\x00\xff\xff\xff\xff\x46\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\x4c\x00\xff\xff\x4e\x00\x4f\x00\x07\x00\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x0e\x00\x3f\x00\xff\xff\x11\x00\xff\xff\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\xff\xff\x1d\x00\xff\xff\x4f\x00\x20\x00\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x27\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\xff\xff\x38\x00\x39\x00\x3a\x00\x3b\x00\x13\x00\x3d\x00\x3e\x00\x3f\x00\xff\xff\x41\x00\x42\x00\x43\x00\xff\xff\xff\xff\x46\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\x4c\x00\xff\xff\x4e\x00\x4f\x00\x07\x00\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x0e\x00\xff\xff\xff\xff\x11\x00\xff\xff\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\xff\xff\x1d\x00\xff\xff\xff\xff\x20\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x27\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x30\x00\x13\x00\xff\xff\x0e\x00\x16\x00\x13\x00\x11\x00\x12\x00\x38\x00\xff\xff\x3a\x00\x3b\x00\x17\x00\x3d\x00\x3e\x00\x3f\x00\xff\xff\x41\x00\xff\xff\x43\x00\x26\x00\x27\x00\xff\xff\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\xff\xff\xff\xff\x4e\x00\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x0e\x00\xff\xff\xff\xff\x11\x00\xff\xff\x13\x00\xff\xff\x3f\x00\x16\x00\xff\xff\x18\x00\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\xff\xff\xff\xff\x20\x00\x00\x00\x01\x00\x02\x00\x03\x00\x4f\x00\xff\xff\x27\x00\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\xff\xff\xff\xff\x16\x00\x30\x00\xff\xff\x11\x00\x12\x00\x13\x00\xff\xff\x1d\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x27\x00\x41\x00\x0e\x00\x43\x00\xff\xff\x11\x00\xff\xff\x47\x00\x14\x00\x15\x00\x4a\x00\x17\x00\xff\xff\xff\xff\x4e\x00\x4f\x00\xff\xff\x38\x00\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x3e\x00\x3f\x00\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\x47\x00\xff\xff\xff\xff\x4a\x00\x00\x00\x01\x00\x02\x00\x03\x00\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\x57\x00\xff\xff\x16\x00\x0f\x00\x18\x00\x11\x00\xff\xff\x13\x00\xff\xff\x1d\x00\xff\xff\xff\xff\x20\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x26\x00\x27\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\xff\xff\x30\x00\xff\xff\x13\x00\xff\xff\x13\x00\x16\x00\xff\xff\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x1d\x00\x3d\x00\x3e\x00\x3f\x00\xff\xff\x41\x00\xff\xff\x43\x00\xff\xff\xff\xff\x27\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\xff\xff\xff\xff\x4e\x00\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\x38\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x3e\x00\x3f\x00\xff\xff\x1d\x00\xff\xff\x43\x00\x20\x00\xff\xff\xff\xff\x47\x00\xff\xff\xff\xff\x4a\x00\x27\x00\xff\xff\xff\xff\xff\xff\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x1d\x00\x3d\x00\x3e\x00\x3f\x00\xff\xff\x41\x00\xff\xff\x43\x00\xff\xff\xff\xff\x27\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\xff\xff\xff\xff\x4e\x00\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\x38\x00\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x3e\x00\x3f\x00\xff\xff\x1d\x00\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\x47\x00\xff\xff\xff\xff\x4a\x00\x27\x00\xff\xff\xff\xff\xff\xff\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\x38\x00\xff\xff\xff\xff\xff\xff\x1d\x00\xff\xff\x3e\x00\x3f\x00\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\x27\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\x38\x00\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x3e\x00\x3f\x00\xff\xff\x1d\x00\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\x47\x00\xff\xff\xff\xff\x4a\x00\x27\x00\xff\xff\xff\xff\xff\xff\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\x38\x00\xff\xff\xff\xff\xff\xff\x1d\x00\xff\xff\x3e\x00\x3f\x00\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\x27\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\x13\x00\x38\x00\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x3e\x00\x3f\x00\xff\xff\x1d\x00\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\x47\x00\xff\xff\xff\xff\x4a\x00\x27\x00\xff\xff\xff\xff\xff\xff\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x38\x00\xff\xff\x13\x00\xff\xff\x13\x00\x16\x00\x3e\x00\x3f\x00\xff\xff\x18\x00\xff\xff\x43\x00\x11\x00\x12\x00\x13\x00\x47\x00\xff\xff\xff\xff\x4a\x00\xff\xff\xff\xff\x26\x00\x27\x00\x4f\x00\x27\x00\x13\x00\x52\x00\x53\x00\x54\x00\x55\x00\x18\x00\x30\x00\x2f\x00\xff\xff\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\xff\xff\xff\xff\xff\xff\xff\xff\x27\x00\x3f\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x4f\x00\xff\xff\xff\xff\x52\x00\x53\x00\x54\x00\x55\x00\xff\xff\x55\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x55\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x1b\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x1b\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\x1b\x00\x0e\x00\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x0e\x00\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x1a\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x1a\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0e\x00\x09\x00\x0a\x00\x11\x00\x12\x00\x13\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x13\x00\x1a\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x19\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x19\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x19\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x18\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x18\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x18\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x18\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x18\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x13\x00\x06\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\x07\x00\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\xff\xff\x0c\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x09\x00\x0a\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\x13\x00\x09\x00\x0a\x00\xff\xff\xff\xff\x09\x00\x0a\x00\x00\x00\x01\x00\x02\x00\x03\x00\x13\x00\xff\xff\xff\xff\xff\xff\x13\x00\x09\x00\x0a\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\x13\x00\x09\x00\x0a\x00\xff\xff\xff\xff\x09\x00\x0a\x00\x00\x00\x01\x00\x02\x00\x03\x00\x13\x00\xff\xff\xff\xff\xff\xff\x13\x00\x09\x00\x0a\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\x11\x00\x12\x00\x13\x00\xff\xff\x11\x00\x12\x00\x13\x00\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x09\x00\x0a\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\x0f\x00\xff\xff\x11\x00\xff\xff\x13\x00\xff\xff\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\x09\x00\x0a\x00\x0f\x00\xff\xff\x11\x00\xff\xff\x13\x00\xff\xff\xff\xff\xff\xff\x13\x00\xff\xff\x11\x00\xff\xff\x13\x00\x00\x00\x01\x00\x02\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

happyTable :: HappyAddr
happyTable = HappyA# "\x00\x00\xf5\x00\xa1\x00\xa1\x00\x9a\x00\x9b\x00\x9c\x00\xa1\x00\xa1\x00\xa1\x00\xfd\x00\x1d\x00\xa1\x00\xa3\x00\x68\x00\xe1\x00\xa4\x00\x55\x00\xa1\x00\xa1\x00\x56\x00\x95\x00\xa5\x00\x22\x01\x1e\x00\x96\x00\x9c\x00\x22\x00\xb7\x00\x22\x00\x1c\x01\xa6\x00\xb9\x00\xb9\xff\xba\x00\xb9\xff\x57\x00\x3b\x00\x13\x01\xb9\xff\xb9\xff\xb9\xff\xa0\xff\xb9\xff\xb9\xff\x97\x00\xa1\x00\xa0\xff\x98\x00\x24\x01\xa0\xff\xa0\xff\xda\x00\xe3\x00\x23\x00\x2c\x01\x2d\x01\xb9\xff\x68\x00\xb9\xff\x14\x01\x43\x00\xb9\xff\xe8\x00\xa1\x00\x2a\x01\xff\xff\xa0\xff\xb9\xff\xb9\xff\xb9\xff\xb9\xff\xb9\xff\xb9\xff\xe2\x00\xa7\x00\x1d\x00\x4c\x00\x99\x00\xff\xff\x1d\x00\x4d\x00\x4e\x00\x21\x00\xb9\xff\x1d\x00\xff\xff\x68\x00\x68\x00\x1e\x00\xb9\xff\xa0\xff\xb9\xff\xef\x00\xf2\x00\xb9\xff\x24\x00\x25\x00\x26\x00\xb9\xff\xfb\x00\xff\xff\xb9\xff\xd9\x00\x7f\x00\x69\x00\x6a\x00\xa0\xff\x2f\x01\x93\x00\xa0\xff\xa0\xff\xa0\xff\xa0\xff\xb9\xff\x80\x00\xb9\xff\x68\x00\x3b\x00\xab\x00\xb9\xff\xb9\xff\xb9\xff\xa0\xff\xb9\xff\xb9\xff\x1d\x00\x68\x00\xa0\xff\xa0\xff\xa0\xff\xa0\xff\xa0\xff\x95\x00\x69\x00\xfe\x00\xac\x00\x96\x00\xb9\xff\x83\x00\xb9\xff\xb3\x00\x43\x00\xb9\xff\x69\x00\x6a\x00\xb4\x00\x12\x01\xa0\xff\xb9\xff\xb9\xff\xb9\xff\xb9\xff\xb9\xff\xb9\xff\x91\x00\xd4\x00\x97\x00\x4c\x00\xa1\x00\x98\x00\x1d\x00\x4d\x00\x4e\x00\xa1\x00\xb9\xff\x9c\x00\x24\x00\x25\x00\x26\x00\x4e\x00\xb9\xff\xa0\xff\xb9\xff\x00\x01\x01\x01\xb9\xff\xbc\x00\x21\x00\x55\x00\xb9\xff\x86\x00\x56\x00\xb9\xff\x50\x00\x51\x00\x52\x00\x1d\x00\xa0\xff\x3a\x01\x99\x00\xa0\xff\xa0\xff\xa0\xff\xa0\xff\xb8\xff\x77\x00\xb8\xff\x57\x00\x3b\x00\x1e\x00\xb8\xff\xb8\xff\xb8\xff\x9c\xff\xb8\xff\xb8\xff\x39\x01\x68\x00\x9c\xff\x9c\xff\x9c\xff\x9c\xff\x9c\xff\x1f\x00\x28\x01\x29\x01\xa1\x00\xa1\x00\xb8\xff\x68\x00\xb8\xff\x2f\x01\x43\x00\xb8\xff\x69\x00\x6a\x00\x31\x01\xf0\x00\x9c\xff\xb8\xff\xb8\xff\xb8\xff\xb8\xff\xb8\xff\xb8\xff\x33\x01\x69\x00\x6a\x00\x4c\x00\xa5\x00\x68\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\xb8\xff\xff\xff\x68\x00\x36\x01\xa1\x00\xa1\x00\xb8\xff\x9c\xff\xb8\xff\xdf\x00\xe0\x00\xb8\xff\x69\x00\x7e\x00\x37\x01\xb8\xff\xa1\x00\xa1\x00\xb8\xff\x69\x00\x6a\x00\x25\x01\xa8\x00\x9c\xff\x2b\x01\x12\x01\x9c\xff\x9c\xff\x9c\xff\x9c\xff\xba\xff\xfa\x00\xba\xff\xa1\x00\xa1\x00\x68\x00\xba\xff\xba\xff\xba\xff\x9e\xff\xba\xff\xba\xff\x21\x00\x68\x00\x9e\xff\x9e\xff\x9e\xff\x9e\xff\x9e\xff\x1d\x00\x9e\x00\x9f\x00\x69\x00\x6a\x00\xba\xff\xa9\x00\xba\xff\xa1\x00\x1d\x01\xba\xff\x69\x00\x6a\x00\x1f\x01\x6b\x00\x9e\xff\xba\xff\xba\xff\xba\xff\xba\xff\xba\xff\xba\xff\xf9\x00\xfa\x00\xa1\x00\xa1\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\xba\xff\x21\x00\x24\x00\x25\x00\x26\x00\x4e\x00\xba\xff\x9e\xff\xba\xff\xde\x00\xa1\x00\xba\xff\x9a\x00\x9b\x00\x9c\x00\xba\xff\xfb\x00\x21\x00\xba\xff\x50\x00\x17\x01\x52\x00\xa3\x00\x9e\xff\x02\x01\xa4\x00\x9e\xff\x9e\xff\x9e\xff\x9e\xff\x32\x00\xa5\x00\xfe\x00\x62\x00\x21\x00\xa3\x00\x11\x01\x33\x00\xa4\x00\xdd\x00\x34\x00\xff\xff\x63\x00\xff\xff\xa5\x00\x64\x00\xab\x00\x37\x00\x21\x00\x38\x00\xb8\x00\xff\xff\x39\x00\xff\xff\xbb\x00\x3a\x00\xc0\x00\x24\x00\x25\x00\x26\x00\xae\x00\x57\x00\x3b\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xb1\x00\x2e\x00\xff\xff\x65\x00\xbe\x00\xc3\x00\x50\x00\xb2\x00\x5f\x00\xff\xff\xd5\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\x41\x00\x42\x00\x43\x00\xd7\x00\x44\x00\x45\x00\x46\x00\xd8\x00\x66\x00\x47\x00\x48\x00\x1d\x00\x21\x00\x49\x00\x67\x00\x4a\x00\x00\x00\x4b\x00\x4c\x00\x68\x00\x32\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x00\x00\xb6\x00\x33\x00\x93\x00\x00\x00\x34\x00\xa3\x00\x63\x00\x00\x00\xa4\x00\x64\x00\x00\x00\x37\x00\x00\x00\x38\x00\xa5\x00\xa3\x00\x39\x00\x00\x00\xa4\x00\x3a\x00\x24\x00\x25\x00\x26\x00\xae\x00\xa5\x00\x57\x00\x3b\x00\xaf\x00\x00\x00\x2b\x00\x2c\x00\x8c\x00\x2e\x00\xa3\x00\x36\x00\x65\x00\xa4\x00\x50\x00\xb0\x00\x5f\x00\x27\x01\x39\x00\xa5\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x41\x00\x42\x00\x43\x00\x3b\x00\x44\x00\x45\x00\x46\x00\x00\x00\x00\x00\x47\x00\x48\x00\x00\x00\x00\x00\x49\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x4c\x00\x32\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x00\x00\x33\x00\x43\x00\x00\x00\x34\x00\x00\x00\x35\x00\x00\x00\x00\x00\x36\x00\x00\x00\x37\x00\x00\x00\x38\x00\x00\x00\x00\x00\x39\x00\x00\x00\x4c\x00\x3a\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x00\x00\x3b\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x08\x01\x00\x00\x00\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2f\x00\x41\x00\x42\x00\x43\x00\x00\x00\x44\x00\x45\x00\x46\x00\x00\x00\x00\x00\x47\x00\x48\x00\x00\x00\x00\x00\x49\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x4c\x00\x32\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x00\x00\x33\x00\x00\x00\x00\x00\x34\x00\x00\x00\x35\x00\x00\x00\x00\x00\x36\x00\x00\x00\x37\x00\x00\x00\x38\x00\x00\x00\x00\x00\x39\x00\x00\x00\x00\x00\x3a\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x3b\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x58\x00\x2e\x00\x87\x00\x3c\x00\x55\x00\x00\x00\xa3\x00\x56\x00\x2f\x00\xa4\x00\xbd\x00\x3d\x00\x00\x00\x3f\x00\x40\x00\xa5\x00\x41\x00\x42\x00\x43\x00\x00\x00\x44\x00\x00\x00\x46\x00\x57\x00\x3b\x00\x00\x00\x48\x00\x00\x00\x00\x00\x49\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x4c\x00\x00\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x33\x00\x00\x00\x00\x00\x34\x00\x00\x00\x35\x00\x00\x00\x43\x00\x36\x00\x00\x00\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x00\x00\x00\x00\x3a\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x4c\x00\x00\x00\x3b\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x8c\x00\x00\x00\x00\x00\x36\x00\x3c\x00\x00\x00\x50\x00\x02\x01\x52\x00\x00\x00\x39\x00\x00\x00\x3d\x00\x00\x00\x3f\x00\x40\x00\x00\x00\x41\x00\x42\x00\x43\x00\x3b\x00\x44\x00\xa3\x00\x46\x00\x00\x00\xa4\x00\x00\x00\x48\x00\xf7\x00\xf8\x00\x49\x00\xa5\x00\x00\x00\x00\x00\x4b\x00\x4c\x00\x00\x00\x3d\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x00\x00\x42\x00\x43\x00\x00\x00\x00\x00\x00\x00\x46\x00\x00\x00\x00\x00\x00\x00\x48\x00\x00\x00\x00\x00\x49\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x4c\x00\x00\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x63\x00\xff\xff\x00\x00\x64\x00\xd5\x00\x37\x00\x85\x00\x00\x00\x52\x00\x00\x00\x39\x00\x00\x00\x00\x00\x3a\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x57\x00\x3b\x00\x0b\x01\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x58\x00\x00\x00\x8c\x00\x00\x00\x2f\x00\x36\x00\x00\x00\x00\x00\x3d\x00\x00\x00\x3f\x00\x40\x00\x39\x00\x41\x00\x42\x00\x43\x00\x00\x00\x44\x00\x00\x00\x46\x00\x00\x00\x00\x00\x3b\x00\x48\x00\x00\x00\x00\x00\x49\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x4c\x00\x00\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x35\x00\x3d\x00\x00\x00\x36\x00\x00\x00\x37\x00\x00\x00\x42\x00\x43\x00\x00\x00\x39\x00\x00\x00\x46\x00\x3a\x00\x00\x00\x00\x00\x48\x00\x00\x00\x00\x00\x49\x00\x3b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\xa7\xff\x00\x00\x00\x00\xa7\xff\x00\x00\x00\x00\x3d\x00\x00\x00\x3f\x00\x40\x00\xa7\xff\x41\x00\x42\x00\x43\x00\x00\x00\x44\x00\x00\x00\x46\x00\x00\x00\x00\x00\xa7\xff\x48\x00\x00\x00\x00\x00\x49\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x4c\x00\x00\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\xa8\xff\xa7\xff\x00\x00\xa8\xff\x00\x00\x00\x00\x00\x00\xa7\xff\xa7\xff\x00\x00\xa8\xff\x00\x00\xa7\xff\x00\x00\x00\x00\x00\x00\xa7\xff\x00\x00\x00\x00\xa7\xff\xa8\xff\x00\x00\x00\x00\x00\x00\xa7\xff\x00\x00\x00\x00\xa7\xff\xa7\xff\xa7\xff\xa7\xff\xa9\xff\x00\x00\x00\x00\xa9\xff\x00\x00\x00\x00\xa8\xff\x00\x00\x00\x00\x00\x00\xa9\xff\x00\x00\xa8\xff\xa8\xff\x00\x00\x00\x00\x00\x00\xa8\xff\x00\x00\x00\x00\xa9\xff\xa8\xff\x00\x00\x00\x00\xa8\xff\x00\x00\x00\x00\x00\x00\x00\x00\xa8\xff\x00\x00\x00\x00\xa8\xff\xa8\xff\xa8\xff\xa8\xff\xab\xff\xa9\xff\x00\x00\xab\xff\x00\x00\x00\x00\x00\x00\xa9\xff\xa9\xff\x00\x00\xab\xff\x00\x00\xa9\xff\x00\x00\x00\x00\x00\x00\xa9\xff\x00\x00\x00\x00\xa9\xff\xab\xff\x00\x00\x00\x00\x00\x00\xa9\xff\x00\x00\x00\x00\xa9\xff\xa9\xff\xa9\xff\xa9\xff\xa6\xff\x00\x00\x00\x00\xa6\xff\x00\x00\x00\x00\xab\xff\x00\x00\x00\x00\x00\x00\xa6\xff\x00\x00\xab\xff\xab\xff\x00\x00\x00\x00\x00\x00\xab\xff\x00\x00\x00\x00\xa6\xff\xab\xff\x00\x00\x00\x00\xab\xff\x00\x00\x00\x00\x00\x00\x00\x00\xab\xff\x00\x00\x00\x00\xab\xff\xab\xff\xab\xff\xab\xff\x8c\x00\xa6\xff\x00\x00\x36\x00\x00\x00\x00\x00\x00\x00\xa6\xff\xa6\xff\x00\x00\x39\x00\x00\x00\xa6\xff\x00\x00\x00\x00\x00\x00\xa6\xff\x00\x00\x00\x00\xa6\xff\x3b\x00\x00\x00\x00\x00\x00\x00\xa6\xff\x00\x00\x00\x00\xa6\xff\xa6\xff\xa6\xff\xa6\xff\x00\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x00\x00\x3d\x00\x00\x00\x55\x00\x00\x00\x6d\x00\x56\x00\x42\x00\x43\x00\x00\x00\x6e\x00\x00\x00\x46\x00\x50\x00\x03\x01\x52\x00\x48\x00\x00\x00\x00\x00\x49\x00\x00\x00\x00\x00\x57\x00\x3b\x00\x4c\x00\x6f\x00\x6d\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x6e\x00\x58\x00\x70\x00\x00\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6f\x00\x43\x00\x9e\x00\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x00\x00\x00\x00\x00\x00\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x4c\x00\x00\x00\x00\x00\x1d\x00\x4d\x00\x4e\x00\x21\x00\x00\x00\x21\x00\x00\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x21\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\xdb\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\xcf\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x00\x00\x2f\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x00\x00\x00\x00\x00\x00\x30\x00\x4f\x00\x00\x00\x00\x00\x50\x00\x51\x00\x52\x00\x4f\x00\x00\x00\x00\x00\x50\x00\x51\x00\x52\x00\x22\x01\x24\x00\x25\x00\x26\x00\x4e\x00\x00\x00\xeb\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\xa1\x00\x2c\x00\x50\x00\x51\x00\x52\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x2f\x00\x53\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x58\x00\x2e\x00\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x25\x01\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x58\x00\x2e\x00\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\xee\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x58\x00\x2e\x00\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x24\x00\x25\x00\x26\x00\x5b\x00\x5a\x00\x5c\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x5d\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x5e\x00\x5f\x00\x24\x00\x25\x00\x26\x00\x5b\x00\x37\x01\x5c\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x5d\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x5e\x00\x5f\x00\x24\x00\x25\x00\x26\x00\x5b\x00\x2d\x01\x5c\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x5d\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x5e\x00\x5f\x00\x24\x00\x25\x00\x26\x00\x5b\x00\xe8\x00\x5c\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x5d\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x5e\x00\x5f\x00\x24\x00\x25\x00\x26\x00\x5b\x00\xf1\x00\x5c\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x5d\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x5e\x00\x5f\x00\x24\x00\x25\x00\x26\x00\x5b\x00\x60\x00\x90\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x5d\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x5e\x00\x5f\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x31\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x33\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x34\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x15\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x16\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x18\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x19\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x1a\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x1d\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x1f\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x20\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xd8\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xe9\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xec\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xed\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xf3\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xf5\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x04\x01\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x9f\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xc0\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xc1\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xc3\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xc4\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xc6\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xca\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xcc\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xcd\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xce\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xb1\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x89\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x28\x00\x29\x00\x8d\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x05\x01\x29\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x06\x01\x29\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x07\x01\x29\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\xd2\x00\x29\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x00\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x2f\x00\x8f\x00\x29\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x0c\x01\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x0d\x01\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x0e\x01\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x0f\x01\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\xaf\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\xd0\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x8e\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x2e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x09\x01\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x0a\x01\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\xbe\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\xc5\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\xc7\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\xc8\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\xc9\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\xcb\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x88\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\xa1\x00\x2c\x00\x24\x00\x25\x00\x26\x00\x27\x00\x24\x00\x25\x00\x26\x00\x27\x00\x2f\x00\xe3\x00\x2c\x00\x00\x00\x00\x00\xe4\x00\x2c\x00\x24\x00\x25\x00\x26\x00\x27\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x2f\x00\xe5\x00\x2c\x00\x24\x00\x25\x00\x26\x00\x27\x00\x24\x00\x25\x00\x26\x00\x27\x00\x2f\x00\xe6\x00\x2c\x00\x00\x00\x00\x00\xea\x00\x2c\x00\x24\x00\x25\x00\x26\x00\x27\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x2f\x00\xa1\x00\x2c\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x2f\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x50\x00\xad\x00\x52\x00\x00\x00\x50\x00\xb0\x00\x52\x00\x00\x00\x00\x00\x50\x00\xb2\x00\x52\x00\x00\x00\x50\x00\xd1\x00\x52\x00\x24\x00\x25\x00\x26\x00\x27\x00\x00\x00\x24\x00\x25\x00\x26\x00\x4e\x00\xa1\x00\x2c\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\xd5\x00\x00\x00\x85\x00\x00\x00\x52\x00\x00\x00\x00\x00\x00\x00\x50\x00\x81\x00\x52\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x24\x00\x25\x00\x26\x00\x27\x00\x24\x00\x25\x00\x26\x00\x4e\x00\x00\x00\x8c\x00\x2c\x00\x84\x00\x00\x00\x85\x00\x00\x00\x52\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x82\x00\x00\x00\x52\x00\x24\x00\x25\x00\x26\x00\x27\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyReduceArr = Happy_Data_Array.array (27, 154) [
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154)
	]

happy_n_terms = 88 :: Int
happy_n_nonterms = 31 :: Int

happyReduce_27 = happySpecReduce_1  0# happyReduction_27
happyReduction_27 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (TI happy_var_1)) -> 
	happyIn30
		 ((read happy_var_1) :: Integer
	)}

happyReduce_28 = happySpecReduce_1  1# happyReduction_28
happyReduction_28 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (TD happy_var_1)) -> 
	happyIn31
		 ((read happy_var_1) :: Double
	)}

happyReduce_29 = happySpecReduce_1  2# happyReduction_29
happyReduction_29 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (TL happy_var_1)) -> 
	happyIn32
		 (happy_var_1
	)}

happyReduce_30 = happySpecReduce_1  3# happyReduction_30
happyReduction_30 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_BIdent happy_var_1)) -> 
	happyIn33
		 (BIdent (happy_var_1)
	)}

happyReduce_31 = happyReduce 6# 4# happyReduction_31
happyReduction_31 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut33 happy_x_2 of { happy_var_2 -> 
	case happyOut54 happy_x_5 of { happy_var_5 -> 
	happyIn34
		 (Prog happy_var_2 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_32 = happyReduce 4# 5# happyReduction_32
happyReduction_32 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut48 happy_x_1 of { happy_var_1 -> 
	case happyOut59 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn35
		 (DLet happy_var_1 (reverse happy_var_2) happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_33 = happySpecReduce_2  5# happyReduction_33
happyReduction_33 happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_2 of { happy_var_2 -> 
	happyIn35
		 (DImport happy_var_2
	)}

happyReduce_34 = happyReduce 5# 5# happyReduction_34
happyReduction_34 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut33 happy_x_2 of { happy_var_2 -> 
	case happyOut60 happy_x_4 of { happy_var_4 -> 
	happyIn35
		 (DImportSubst happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_35 = happySpecReduce_3  5# happyReduction_35
happyReduction_35 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	case happyOut53 happy_x_3 of { happy_var_3 -> 
	happyIn35
		 (DType happy_var_1 happy_var_3
	)}}

happyReduce_36 = happyReduce 4# 5# happyReduction_36
happyReduction_36 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut33 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn35
		 (DSinkConn happy_var_1 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_37 = happyReduce 4# 5# happyReduction_37
happyReduction_37 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut33 happy_x_1 of { happy_var_1 -> 
	case happyOut33 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn35
		 (DReadSrc happy_var_1 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_38 = happySpecReduce_3  5# happyReduction_38
happyReduction_38 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_3 of { happy_var_3 -> 
	happyIn35
		 (DStage happy_var_2 happy_var_3
	)}}

happyReduce_39 = happyReduce 4# 5# happyReduction_39
happyReduction_39 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut33 happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_4 of { happy_var_4 -> 
	happyIn35
		 (DStageNeg happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_40 = happyReduce 8# 5# happyReduction_40
happyReduction_40 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut48 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	case happyOut54 happy_x_7 of { happy_var_7 -> 
	happyIn35
		 (DEvery happy_var_2 happy_var_4 happy_var_7
	) `HappyStk` happyRest}}}

happyReduce_41 = happySpecReduce_3  5# happyReduction_41
happyReduction_41 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn35
		 (DDist happy_var_1 happy_var_3
	)}}

happyReduce_42 = happySpecReduce_3  5# happyReduction_42
happyReduction_42 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn35
		 (DPragma happy_var_2 happy_var_3
	)}}

happyReduce_43 = happySpecReduce_3  6# happyReduction_43
happyReduction_43 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	case happyOut37 happy_x_3 of { happy_var_3 -> 
	happyIn36
		 (Add happy_var_1 happy_var_3
	)}}

happyReduce_44 = happySpecReduce_3  6# happyReduction_44
happyReduction_44 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	case happyOut37 happy_x_3 of { happy_var_3 -> 
	happyIn36
		 (Sub happy_var_1 happy_var_3
	)}}

happyReduce_45 = happySpecReduce_2  6# happyReduction_45
happyReduction_45 happy_x_2
	happy_x_1
	 =  case happyOut37 happy_x_2 of { happy_var_2 -> 
	happyIn36
		 (Not happy_var_2
	)}

happyReduce_46 = happyReduce 4# 6# happyReduction_46
happyReduction_46 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut48 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn36
		 (Lam happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_47 = happySpecReduce_3  6# happyReduction_47
happyReduction_47 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	case happyOut37 happy_x_3 of { happy_var_3 -> 
	happyIn36
		 (SigAt happy_var_1 happy_var_3
	)}}

happyReduce_48 = happySpecReduce_2  6# happyReduction_48
happyReduction_48 happy_x_2
	happy_x_1
	 =  case happyOut37 happy_x_2 of { happy_var_2 -> 
	happyIn36
		 (SigDeriv happy_var_2
	)}

happyReduce_49 = happySpecReduce_3  6# happyReduction_49
happyReduction_49 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	case happyOut37 happy_x_3 of { happy_var_3 -> 
	happyIn36
		 (SigFby happy_var_1 happy_var_3
	)}}

happyReduce_50 = happySpecReduce_3  6# happyReduction_50
happyReduction_50 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	case happyOut37 happy_x_3 of { happy_var_3 -> 
	happyIn36
		 (ETest happy_var_1 happy_var_3
	)}}

happyReduce_51 = happySpecReduce_1  6# happyReduction_51
happyReduction_51 happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	happyIn36
		 (happy_var_1
	)}

happyReduce_52 = happySpecReduce_3  7# happyReduction_52
happyReduction_52 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	case happyOut42 happy_x_3 of { happy_var_3 -> 
	happyIn37
		 (Mul happy_var_1 happy_var_3
	)}}

happyReduce_53 = happySpecReduce_3  7# happyReduction_53
happyReduction_53 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	case happyOut42 happy_x_3 of { happy_var_3 -> 
	happyIn37
		 (Div happy_var_1 happy_var_3
	)}}

happyReduce_54 = happySpecReduce_3  7# happyReduction_54
happyReduction_54 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	case happyOut42 happy_x_3 of { happy_var_3 -> 
	happyIn37
		 (EIn happy_var_1 happy_var_3
	)}}

happyReduce_55 = happySpecReduce_1  7# happyReduction_55
happyReduction_55 happy_x_1
	 =  case happyOut42 happy_x_1 of { happy_var_1 -> 
	happyIn37
		 (happy_var_1
	)}

happyReduce_56 = happySpecReduce_2  8# happyReduction_56
happyReduction_56 happy_x_2
	happy_x_1
	 =  case happyOut36 happy_x_2 of { happy_var_2 -> 
	happyIn38
		 (Negate happy_var_2
	)}

happyReduce_57 = happySpecReduce_3  8# happyReduction_57
happyReduction_57 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	case happyOut36 happy_x_3 of { happy_var_3 -> 
	happyIn38
		 (And happy_var_1 happy_var_3
	)}}

happyReduce_58 = happySpecReduce_3  8# happyReduction_58
happyReduction_58 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	case happyOut36 happy_x_3 of { happy_var_3 -> 
	happyIn38
		 (Or happy_var_1 happy_var_3
	)}}

happyReduce_59 = happySpecReduce_3  8# happyReduction_59
happyReduction_59 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	case happyOut52 happy_x_2 of { happy_var_2 -> 
	case happyOut36 happy_x_3 of { happy_var_3 -> 
	happyIn38
		 (ECmp happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_60 = happySpecReduce_3  8# happyReduction_60
happyReduction_60 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn38
		 (Sig happy_var_2
	)}

happyReduce_61 = happyReduce 5# 8# happyReduction_61
happyReduction_61 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn38
		 (SigLimited happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_62 = happySpecReduce_1  8# happyReduction_62
happyReduction_62 happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	happyIn38
		 (happy_var_1
	)}

happyReduce_63 = happySpecReduce_2  9# happyReduction_63
happyReduction_63 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn39
		 (Natexp happy_var_2
	)}

happyReduce_64 = happySpecReduce_2  9# happyReduction_64
happyReduction_64 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn39
		 (Natlog happy_var_2
	)}

happyReduce_65 = happySpecReduce_2  9# happyReduction_65
happyReduction_65 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn39
		 (Realpart happy_var_2
	)}

happyReduce_66 = happySpecReduce_2  9# happyReduction_66
happyReduction_66 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn39
		 (Imagpart happy_var_2
	)}

happyReduce_67 = happySpecReduce_2  9# happyReduction_67
happyReduction_67 happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_2 of { happy_var_2 -> 
	happyIn39
		 (Box happy_var_2
	)}

happyReduce_68 = happySpecReduce_1  9# happyReduction_68
happyReduction_68 happy_x_1
	 =  case happyOut40 happy_x_1 of { happy_var_1 -> 
	happyIn39
		 (happy_var_1
	)}

happyReduce_69 = happySpecReduce_1  10# happyReduction_69
happyReduction_69 happy_x_1
	 =  case happyOut49 happy_x_1 of { happy_var_1 -> 
	happyIn40
		 (EConst happy_var_1
	)}

happyReduce_70 = happySpecReduce_1  10# happyReduction_70
happyReduction_70 happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	happyIn40
		 (Var happy_var_1
	)}

happyReduce_71 = happySpecReduce_1  10# happyReduction_71
happyReduction_71 happy_x_1
	 =  happyIn40
		 (Nil
	)

happyReduce_72 = happySpecReduce_3  10# happyReduction_72
happyReduction_72 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn40
		 (SigVal happy_var_2
	)}

happyReduce_73 = happySpecReduce_3  10# happyReduction_73
happyReduction_73 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn40
		 (happy_var_2
	)}

happyReduce_74 = happyReduce 6# 11# happyReduction_74
happyReduction_74 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	happyIn41
		 (If happy_var_2 happy_var_4 happy_var_6
	) `HappyStk` happyRest}}}

happyReduce_75 = happySpecReduce_3  11# happyReduction_75
happyReduction_75 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Cons happy_var_1 happy_var_3
	)}}

happyReduce_76 = happyReduce 6# 11# happyReduction_76
happyReduction_76 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_3 of { happy_var_3 -> 
	case happyOut55 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Switch happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_77 = happyReduce 6# 11# happyReduction_77
happyReduction_77 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut54 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	happyIn41
		 (ELet happy_var_3 happy_var_6
	) `HappyStk` happyRest}}

happyReduce_78 = happyReduce 6# 11# happyReduction_78
happyReduction_78 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (ECase happy_var_2 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_79 = happySpecReduce_1  11# happyReduction_79
happyReduction_79 happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (happy_var_1
	)}

happyReduce_80 = happySpecReduce_2  12# happyReduction_80
happyReduction_80 happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_1 of { happy_var_1 -> 
	case happyOut39 happy_x_2 of { happy_var_2 -> 
	happyIn42
		 (App happy_var_1 happy_var_2
	)}}

happyReduce_81 = happyReduce 5# 12# happyReduction_81
happyReduction_81 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn42
		 (Pair happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_82 = happyReduce 7# 12# happyReduction_82
happyReduction_82 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	happyIn42
		 (Pair3 happy_var_2 happy_var_4 happy_var_6
	) `HappyStk` happyRest}}}

happyReduce_83 = happySpecReduce_3  12# happyReduction_83
happyReduction_83 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut57 happy_x_2 of { happy_var_2 -> 
	happyIn42
		 (ListLit happy_var_2
	)}

happyReduce_84 = happySpecReduce_3  12# happyReduction_84
happyReduction_84 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_2 of { happy_var_2 -> 
	case happyOut39 happy_x_3 of { happy_var_3 -> 
	happyIn42
		 (SigDelay happy_var_2 happy_var_3
	)}}

happyReduce_85 = happySpecReduce_3  12# happyReduction_85
happyReduction_85 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn42
		 (Event happy_var_2
	)}

happyReduce_86 = happySpecReduce_3  12# happyReduction_86
happyReduction_86 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_2 of { happy_var_2 -> 
	case happyOut39 happy_x_3 of { happy_var_3 -> 
	happyIn42
		 (EScan happy_var_2 happy_var_3
	)}}

happyReduce_87 = happySpecReduce_3  12# happyReduction_87
happyReduction_87 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_2 of { happy_var_2 -> 
	case happyOut39 happy_x_3 of { happy_var_3 -> 
	happyIn42
		 (Forget happy_var_2 happy_var_3
	)}}

happyReduce_88 = happySpecReduce_3  12# happyReduction_88
happyReduction_88 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_2 of { happy_var_2 -> 
	case happyOut39 happy_x_3 of { happy_var_3 -> 
	happyIn42
		 (Translate happy_var_2 happy_var_3
	)}}

happyReduce_89 = happySpecReduce_3  12# happyReduction_89
happyReduction_89 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut42 happy_x_2 of { happy_var_2 -> 
	case happyOut39 happy_x_3 of { happy_var_3 -> 
	happyIn42
		 (Colour happy_var_2 happy_var_3
	)}}

happyReduce_90 = happySpecReduce_1  12# happyReduction_90
happyReduction_90 happy_x_1
	 =  case happyOut39 happy_x_1 of { happy_var_1 -> 
	happyIn42
		 (happy_var_1
	)}

happyReduce_91 = happySpecReduce_3  13# happyReduction_91
happyReduction_91 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn43
		 (SwitchLine happy_var_1 happy_var_3
	)}}

happyReduce_92 = happySpecReduce_3  14# happyReduction_92
happyReduction_92 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn44
		 (CaseLine happy_var_1 happy_var_3
	)}}

happyReduce_93 = happySpecReduce_1  15# happyReduction_93
happyReduction_93 happy_x_1
	 =  case happyOut47 happy_x_1 of { happy_var_1 -> 
	happyIn45
		 (Arg happy_var_1
	)}

happyReduce_94 = happySpecReduce_3  16# happyReduction_94
happyReduction_94 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn46
		 (ImpSubstLine happy_var_1 happy_var_3
	)}}

happyReduce_95 = happySpecReduce_1  17# happyReduction_95
happyReduction_95 happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	happyIn47
		 (PVar happy_var_1
	)}

happyReduce_96 = happySpecReduce_1  17# happyReduction_96
happyReduction_96 happy_x_1
	 =  happyIn47
		 (PWild
	)

happyReduce_97 = happySpecReduce_1  17# happyReduction_97
happyReduction_97 happy_x_1
	 =  case happyOut49 happy_x_1 of { happy_var_1 -> 
	happyIn47
		 (PLit happy_var_1
	)}

happyReduce_98 = happyReduce 5# 17# happyReduction_98
happyReduction_98 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut48 happy_x_2 of { happy_var_2 -> 
	case happyOut48 happy_x_4 of { happy_var_4 -> 
	happyIn47
		 (PPair happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_99 = happySpecReduce_1  17# happyReduction_99
happyReduction_99 happy_x_1
	 =  happyIn47
		 (PNil
	)

happyReduce_100 = happySpecReduce_3  17# happyReduction_100
happyReduction_100 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_2 of { happy_var_2 -> 
	happyIn47
		 (happy_var_2
	)}

happyReduce_101 = happySpecReduce_3  18# happyReduction_101
happyReduction_101 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_1 of { happy_var_1 -> 
	case happyOut48 happy_x_3 of { happy_var_3 -> 
	happyIn48
		 (PCons happy_var_1 happy_var_3
	)}}

happyReduce_102 = happySpecReduce_3  18# happyReduction_102
happyReduction_102 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_1 of { happy_var_1 -> 
	case happyOut48 happy_x_3 of { happy_var_3 -> 
	happyIn48
		 (PIn happy_var_1 happy_var_3
	)}}

happyReduce_103 = happySpecReduce_2  18# happyReduction_103
happyReduction_103 happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_2 of { happy_var_2 -> 
	happyIn48
		 (PDeriv happy_var_2
	)}

happyReduce_104 = happySpecReduce_2  18# happyReduction_104
happyReduction_104 happy_x_2
	happy_x_1
	 =  case happyOut48 happy_x_1 of { happy_var_1 -> 
	happyIn48
		 (PRemember happy_var_1
	)}

happyReduce_105 = happySpecReduce_1  18# happyReduction_105
happyReduction_105 happy_x_1
	 =  case happyOut47 happy_x_1 of { happy_var_1 -> 
	happyIn48
		 (happy_var_1
	)}

happyReduce_106 = happySpecReduce_1  19# happyReduction_106
happyReduction_106 happy_x_1
	 =  case happyOut30 happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (CInt happy_var_1
	)}

happyReduce_107 = happySpecReduce_1  19# happyReduction_107
happyReduction_107 happy_x_1
	 =  case happyOut31 happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (CDbl happy_var_1
	)}

happyReduce_108 = happySpecReduce_1  19# happyReduction_108
happyReduction_108 happy_x_1
	 =  happyIn49
		 (CUnit
	)

happyReduce_109 = happySpecReduce_1  19# happyReduction_109
happyReduction_109 happy_x_1
	 =  happyIn49
		 (CTrue
	)

happyReduce_110 = happySpecReduce_1  19# happyReduction_110
happyReduction_110 happy_x_1
	 =  happyIn49
		 (CFalse
	)

happyReduce_111 = happySpecReduce_1  19# happyReduction_111
happyReduction_111 happy_x_1
	 =  case happyOut32 happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (CString happy_var_1
	)}

happyReduce_112 = happySpecReduce_1  20# happyReduction_112
happyReduction_112 happy_x_1
	 =  happyIn50
		 (TUnit
	)

happyReduce_113 = happyReduce 5# 20# happyReduction_113
happyReduction_113 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut53 happy_x_2 of { happy_var_2 -> 
	case happyOut53 happy_x_4 of { happy_var_4 -> 
	happyIn50
		 (TPair2 happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_114 = happyReduce 7# 20# happyReduction_114
happyReduction_114 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut53 happy_x_2 of { happy_var_2 -> 
	case happyOut53 happy_x_4 of { happy_var_4 -> 
	case happyOut53 happy_x_6 of { happy_var_6 -> 
	happyIn50
		 (TPair3 happy_var_2 happy_var_4 happy_var_6
	) `HappyStk` happyRest}}}

happyReduce_115 = happySpecReduce_1  20# happyReduction_115
happyReduction_115 happy_x_1
	 =  happyIn50
		 (TNum
	)

happyReduce_116 = happySpecReduce_1  20# happyReduction_116
happyReduction_116 happy_x_1
	 =  happyIn50
		 (TReal
	)

happyReduce_117 = happySpecReduce_1  20# happyReduction_117
happyReduction_117 happy_x_1
	 =  happyIn50
		 (TInt
	)

happyReduce_118 = happySpecReduce_1  20# happyReduction_118
happyReduction_118 happy_x_1
	 =  happyIn50
		 (TBool
	)

happyReduce_119 = happySpecReduce_1  20# happyReduction_119
happyReduction_119 happy_x_1
	 =  happyIn50
		 (TShape
	)

happyReduce_120 = happySpecReduce_2  20# happyReduction_120
happyReduction_120 happy_x_2
	happy_x_1
	 =  case happyOut53 happy_x_2 of { happy_var_2 -> 
	happyIn50
		 (TSignal happy_var_2
	)}

happyReduce_121 = happySpecReduce_3  20# happyReduction_121
happyReduction_121 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut53 happy_x_2 of { happy_var_2 -> 
	happyIn50
		 (TList happy_var_2
	)}

happyReduce_122 = happySpecReduce_1  20# happyReduction_122
happyReduction_122 happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (TyVar happy_var_1
	)}

happyReduce_123 = happySpecReduce_3  20# happyReduction_123
happyReduction_123 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut53 happy_x_2 of { happy_var_2 -> 
	happyIn50
		 (happy_var_2
	)}

happyReduce_124 = happySpecReduce_3  21# happyReduction_124
happyReduction_124 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut50 happy_x_1 of { happy_var_1 -> 
	case happyOut51 happy_x_3 of { happy_var_3 -> 
	happyIn51
		 (TLam happy_var_1 happy_var_3
	)}}

happyReduce_125 = happySpecReduce_2  21# happyReduction_125
happyReduction_125 happy_x_2
	happy_x_1
	 =  case happyOut50 happy_x_2 of { happy_var_2 -> 
	happyIn51
		 (TEvent happy_var_2
	)}

happyReduce_126 = happySpecReduce_2  21# happyReduction_126
happyReduction_126 happy_x_2
	happy_x_1
	 =  case happyOut50 happy_x_2 of { happy_var_2 -> 
	happyIn51
		 (TDuration happy_var_2
	)}

happyReduce_127 = happySpecReduce_1  21# happyReduction_127
happyReduction_127 happy_x_1
	 =  case happyOut50 happy_x_1 of { happy_var_1 -> 
	happyIn51
		 (happy_var_1
	)}

happyReduce_128 = happySpecReduce_1  22# happyReduction_128
happyReduction_128 happy_x_1
	 =  happyIn52
		 (Lt
	)

happyReduce_129 = happySpecReduce_1  22# happyReduction_129
happyReduction_129 happy_x_1
	 =  happyIn52
		 (Gt
	)

happyReduce_130 = happySpecReduce_1  22# happyReduction_130
happyReduction_130 happy_x_1
	 =  happyIn52
		 (Le
	)

happyReduce_131 = happySpecReduce_1  22# happyReduction_131
happyReduction_131 happy_x_1
	 =  happyIn52
		 (Ge
	)

happyReduce_132 = happySpecReduce_1  22# happyReduction_132
happyReduction_132 happy_x_1
	 =  happyIn52
		 (Eq
	)

happyReduce_133 = happySpecReduce_1  22# happyReduction_133
happyReduction_133 happy_x_1
	 =  happyIn52
		 (Ne
	)

happyReduce_134 = happySpecReduce_1  23# happyReduction_134
happyReduction_134 happy_x_1
	 =  case happyOut51 happy_x_1 of { happy_var_1 -> 
	happyIn53
		 (happy_var_1
	)}

happyReduce_135 = happySpecReduce_0  24# happyReduction_135
happyReduction_135  =  happyIn54
		 ([]
	)

happyReduce_136 = happySpecReduce_1  24# happyReduction_136
happyReduction_136 happy_x_1
	 =  case happyOut35 happy_x_1 of { happy_var_1 -> 
	happyIn54
		 ((:[]) happy_var_1
	)}

happyReduce_137 = happySpecReduce_3  24# happyReduction_137
happyReduction_137 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { happy_var_1 -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	happyIn54
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_138 = happySpecReduce_0  25# happyReduction_138
happyReduction_138  =  happyIn55
		 ([]
	)

happyReduce_139 = happySpecReduce_1  25# happyReduction_139
happyReduction_139 happy_x_1
	 =  case happyOut43 happy_x_1 of { happy_var_1 -> 
	happyIn55
		 ((:[]) happy_var_1
	)}

happyReduce_140 = happySpecReduce_3  25# happyReduction_140
happyReduction_140 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut43 happy_x_1 of { happy_var_1 -> 
	case happyOut55 happy_x_3 of { happy_var_3 -> 
	happyIn55
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_141 = happySpecReduce_0  26# happyReduction_141
happyReduction_141  =  happyIn56
		 ([]
	)

happyReduce_142 = happySpecReduce_1  26# happyReduction_142
happyReduction_142 happy_x_1
	 =  case happyOut44 happy_x_1 of { happy_var_1 -> 
	happyIn56
		 ((:[]) happy_var_1
	)}

happyReduce_143 = happySpecReduce_3  26# happyReduction_143
happyReduction_143 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut44 happy_x_1 of { happy_var_1 -> 
	case happyOut56 happy_x_3 of { happy_var_3 -> 
	happyIn56
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_144 = happySpecReduce_0  27# happyReduction_144
happyReduction_144  =  happyIn57
		 ([]
	)

happyReduce_145 = happySpecReduce_1  27# happyReduction_145
happyReduction_145 happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	happyIn57
		 ((:[]) happy_var_1
	)}

happyReduce_146 = happySpecReduce_3  27# happyReduction_146
happyReduction_146 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut57 happy_x_3 of { happy_var_3 -> 
	happyIn57
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_147 = happySpecReduce_0  28# happyReduction_147
happyReduction_147  =  happyIn58
		 ([]
	)

happyReduce_148 = happySpecReduce_1  28# happyReduction_148
happyReduction_148 happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	happyIn58
		 ((:[]) happy_var_1
	)}

happyReduce_149 = happySpecReduce_3  28# happyReduction_149
happyReduction_149 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	case happyOut58 happy_x_3 of { happy_var_3 -> 
	happyIn58
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_150 = happySpecReduce_0  29# happyReduction_150
happyReduction_150  =  happyIn59
		 ([]
	)

happyReduce_151 = happySpecReduce_2  29# happyReduction_151
happyReduction_151 happy_x_2
	happy_x_1
	 =  case happyOut59 happy_x_1 of { happy_var_1 -> 
	case happyOut45 happy_x_2 of { happy_var_2 -> 
	happyIn59
		 (flip (:) happy_var_1 happy_var_2
	)}}

happyReduce_152 = happySpecReduce_0  30# happyReduction_152
happyReduction_152  =  happyIn60
		 ([]
	)

happyReduce_153 = happySpecReduce_1  30# happyReduction_153
happyReduction_153 happy_x_1
	 =  case happyOut46 happy_x_1 of { happy_var_1 -> 
	happyIn60
		 ((:[]) happy_var_1
	)}

happyReduce_154 = happySpecReduce_3  30# happyReduction_154
happyReduction_154 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut46 happy_x_1 of { happy_var_1 -> 
	case happyOut60 happy_x_3 of { happy_var_3 -> 
	happyIn60
		 ((:) happy_var_1 happy_var_3
	)}}

happyNewToken action sts stk [] =
	happyDoAction 87# notHappyAtAll action sts stk []

happyNewToken action sts stk (tk:tks) =
	let cont i = happyDoAction i tk action sts stk tks in
	case tk of {
	PT _ (TS "{") -> cont 1#;
	PT _ (TS "}") -> cont 2#;
	PT _ (TS "=") -> cont 3#;
	PT _ (TS "::") -> cont 4#;
	PT _ (TS "*>") -> cont 5#;
	PT _ (TS "<*") -> cont 6#;
	PT _ (TS "-") -> cont 7#;
	PT _ (TS "<-") -> cont 8#;
	PT _ (TS "~") -> cont 9#;
	PT _ (TS "^^") -> cont 10#;
	PT _ (TS "+") -> cont 11#;
	PT _ (TS "*") -> cont 12#;
	PT _ (TS "/") -> cont 13#;
	PT _ (TS "\\") -> cont 14#;
	PT _ (TS "&&") -> cont 15#;
	PT _ (TS "||") -> cont 16#;
	PT _ (TS "!") -> cont 17#;
	PT _ (TS "->") -> cont 18#;
	PT _ (TS "(") -> cont 19#;
	PT _ (TS ",") -> cont 20#;
	PT _ (TS ")") -> cont 21#;
	PT _ (TS "[]") -> cont 22#;
	PT _ (TS ":") -> cont 23#;
	PT _ (TS "[") -> cont 24#;
	PT _ (TS "]") -> cont 25#;
	PT _ (TS "{:") -> cont 26#;
	PT _ (TS ":}") -> cont 27#;
	PT _ (TS "#") -> cont 28#;
	PT _ (TS "<:") -> cont 29#;
	PT _ (TS ":>") -> cont 30#;
	PT _ (TS "@") -> cont 31#;
	PT _ (TS "[:") -> cont 32#;
	PT _ (TS ":]") -> cont 33#;
	PT _ (TS "?") -> cont 34#;
	PT _ (TS ";") -> cont 35#;
	PT _ (TS "~>") -> cont 36#;
	PT _ (TS "=>") -> cont 37#;
	PT _ (TS "_") -> cont 38#;
	PT _ (TS "()") -> cont 39#;
	PT _ (TS "<") -> cont 40#;
	PT _ (TS ">") -> cont 41#;
	PT _ (TS "<=") -> cont 42#;
	PT _ (TS ">=") -> cont 43#;
	PT _ (TS "==") -> cont 44#;
	PT _ (TS "!=") -> cont 45#;
	PT _ (TS " ") -> cont 46#;
	PT _ (TS "Bool") -> cont 47#;
	PT _ (TS "D") -> cont 48#;
	PT _ (TS "Duration") -> cont 49#;
	PT _ (TS "Event") -> cont 50#;
	PT _ (TS "Int") -> cont 51#;
	PT _ (TS "Number") -> cont 52#;
	PT _ (TS "Real") -> cont 53#;
	PT _ (TS "Shape") -> cont 54#;
	PT _ (TS "Signal") -> cont 55#;
	PT _ (TS "box") -> cont 56#;
	PT _ (TS "case") -> cont 57#;
	PT _ (TS "colour") -> cont 58#;
	PT _ (TS "delay") -> cont 59#;
	PT _ (TS "else") -> cont 60#;
	PT _ (TS "escan") -> cont 61#;
	PT _ (TS "exp") -> cont 62#;
	PT _ (TS "false") -> cont 63#;
	PT _ (TS "fby") -> cont 64#;
	PT _ (TS "forget") -> cont 65#;
	PT _ (TS "if") -> cont 66#;
	PT _ (TS "im") -> cont 67#;
	PT _ (TS "in") -> cont 68#;
	PT _ (TS "inevery") -> cont 69#;
	PT _ (TS "let") -> cont 70#;
	PT _ (TS "ln") -> cont 71#;
	PT _ (TS "module") -> cont 72#;
	PT _ (TS "of") -> cont 73#;
	PT _ (TS "re") -> cont 74#;
	PT _ (TS "stage") -> cont 75#;
	PT _ (TS "switch") -> cont 76#;
	PT _ (TS "then") -> cont 77#;
	PT _ (TS "translate") -> cont 78#;
	PT _ (TS "true") -> cont 79#;
	PT _ (TS "use") -> cont 80#;
	PT _ (TS "where") -> cont 81#;
	PT _ (TI happy_dollar_dollar) -> cont 82#;
	PT _ (TD happy_dollar_dollar) -> cont 83#;
	PT _ (TL happy_dollar_dollar) -> cont 84#;
	PT _ (T_BIdent happy_dollar_dollar) -> cont 85#;
	_ -> cont 86#;
	_ -> happyError' (tk:tks)
	}

happyError_ tk tks = happyError' (tk:tks)

happyThen :: () => Err a -> (a -> Err b) -> Err b
happyThen = (thenM)
happyReturn :: () => a -> Err a
happyReturn = (returnM)
happyThen1 m k tks = (thenM) m (\a -> k a tks)
happyReturn1 :: () => a -> b -> Err a
happyReturn1 = \a tks -> (returnM) a
happyError' :: () => [(Token)] -> Err a
happyError' = happyError

pProgram tks = happySomeParser where
  happySomeParser = happyThen (happyParse 0# tks) (\x -> happyReturn (happyOut34 x))

pDeclare tks = happySomeParser where
  happySomeParser = happyThen (happyParse 1# tks) (\x -> happyReturn (happyOut35 x))

pExp2 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 2# tks) (\x -> happyReturn (happyOut36 x))

pExp3 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 3# tks) (\x -> happyReturn (happyOut37 x))

pExp1 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 4# tks) (\x -> happyReturn (happyOut38 x))

pExp5 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 5# tks) (\x -> happyReturn (happyOut39 x))

pExp6 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 6# tks) (\x -> happyReturn (happyOut40 x))

pExp tks = happySomeParser where
  happySomeParser = happyThen (happyParse 7# tks) (\x -> happyReturn (happyOut41 x))

pExp4 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 8# tks) (\x -> happyReturn (happyOut42 x))

pSwitchLine tks = happySomeParser where
  happySomeParser = happyThen (happyParse 9# tks) (\x -> happyReturn (happyOut43 x))

pCaseLine tks = happySomeParser where
  happySomeParser = happyThen (happyParse 10# tks) (\x -> happyReturn (happyOut44 x))

pArg tks = happySomeParser where
  happySomeParser = happyThen (happyParse 11# tks) (\x -> happyReturn (happyOut45 x))

pImpSubstLine tks = happySomeParser where
  happySomeParser = happyThen (happyParse 12# tks) (\x -> happyReturn (happyOut46 x))

pPat1 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 13# tks) (\x -> happyReturn (happyOut47 x))

pPat tks = happySomeParser where
  happySomeParser = happyThen (happyParse 14# tks) (\x -> happyReturn (happyOut48 x))

pConst tks = happySomeParser where
  happySomeParser = happyThen (happyParse 15# tks) (\x -> happyReturn (happyOut49 x))

pType2 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 16# tks) (\x -> happyReturn (happyOut50 x))

pType1 tks = happySomeParser where
  happySomeParser = happyThen (happyParse 17# tks) (\x -> happyReturn (happyOut51 x))

pCmpOp tks = happySomeParser where
  happySomeParser = happyThen (happyParse 18# tks) (\x -> happyReturn (happyOut52 x))

pType tks = happySomeParser where
  happySomeParser = happyThen (happyParse 19# tks) (\x -> happyReturn (happyOut53 x))

pListDeclare tks = happySomeParser where
  happySomeParser = happyThen (happyParse 20# tks) (\x -> happyReturn (happyOut54 x))

pListSwitchLine tks = happySomeParser where
  happySomeParser = happyThen (happyParse 21# tks) (\x -> happyReturn (happyOut55 x))

pListCaseLine tks = happySomeParser where
  happySomeParser = happyThen (happyParse 22# tks) (\x -> happyReturn (happyOut56 x))

pListExp tks = happySomeParser where
  happySomeParser = happyThen (happyParse 23# tks) (\x -> happyReturn (happyOut57 x))

pListBIdent tks = happySomeParser where
  happySomeParser = happyThen (happyParse 24# tks) (\x -> happyReturn (happyOut58 x))

pListArg tks = happySomeParser where
  happySomeParser = happyThen (happyParse 25# tks) (\x -> happyReturn (happyOut59 x))

pListImpSubstLine tks = happySomeParser where
  happySomeParser = happyThen (happyParse 26# tks) (\x -> happyReturn (happyOut60 x))

happySeq = happyDontSeq


returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map prToken (take 4 ts))

myLexer = tokens
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 

{-# LINE 28 "templates/GenericTemplate.hs" #-}


data Happy_IntList = HappyCons Happy_GHC_Exts.Int# Happy_IntList





{-# LINE 49 "templates/GenericTemplate.hs" #-}

{-# LINE 59 "templates/GenericTemplate.hs" #-}

{-# LINE 68 "templates/GenericTemplate.hs" #-}

infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is 0#, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept 0# tk st sts (_ `HappyStk` ans `HappyStk` _) =
	happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
	(happyTcHack j (happyTcHack st)) (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
	= {- nothing -}


	  case action of
		0#		  -> {- nothing -}
				     happyFail i tk st
		-1# 	  -> {- nothing -}
				     happyAccept i tk st
		n | (n Happy_GHC_Exts.<# (0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}

				     (happyReduceArr Happy_Data_Array.! rule) i tk st
				     where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
		n		  -> {- nothing -}


				     happyShift new_state i tk st
				     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = indexShortOffAddr happyActOffsets st
	 off_i  = (off Happy_GHC_Exts.+# i)
	 check  = if (off_i Happy_GHC_Exts.>=# (0# :: Happy_GHC_Exts.Int#))
			then (indexShortOffAddr happyCheck off_i Happy_GHC_Exts.==#  i)
			else False
 	 action | check     = indexShortOffAddr happyTable off_i
		| otherwise = indexShortOffAddr happyDefActions st

{-# LINE 127 "templates/GenericTemplate.hs" #-}


indexShortOffAddr (HappyA# arr) off =
#if __GLASGOW_HASKELL__ > 500
	Happy_GHC_Exts.narrow16Int# i
#elif __GLASGOW_HASKELL__ == 500
	Happy_GHC_Exts.intToInt16# i
#else
	Happy_GHC_Exts.iShiftRA# (Happy_GHC_Exts.iShiftL# i 16#) 16#
#endif
  where
#if __GLASGOW_HASKELL__ >= 503
	i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
#else
	i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.shiftL# high 8#) low)
#endif
	high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
	low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
	off' = off Happy_GHC_Exts.*# 2#





data HappyAddr = HappyA# Happy_GHC_Exts.Addr#




-----------------------------------------------------------------------------
-- HappyState data type (not arrays)

{-# LINE 170 "templates/GenericTemplate.hs" #-}

-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((happyInTok (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) sts of
	 sts1@((HappyCons (st1@(action)) (_))) ->
        	let r = fn stk in  -- it doesn't hurt to always seq here...
       		happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
        happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))
       where sts1@((HappyCons (st1@(action)) (_))) = happyDrop k (HappyCons (st) (sts))
             drop_stk = happyDropStk k stk

happyMonad2Reduce k nt fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
       happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))
       where sts1@((HappyCons (st1@(action)) (_))) = happyDrop k (HappyCons (st) (sts))
             drop_stk = happyDropStk k stk

             off    = indexShortOffAddr happyGotoOffsets st1
             off_i  = (off Happy_GHC_Exts.+# nt)
             new_state = indexShortOffAddr happyTable off_i




happyDrop 0# l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) t

happyDropStk 0# l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Happy_GHC_Exts.-# (1#::Happy_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   {- nothing -}
   happyDoAction j tk new_state
   where off    = indexShortOffAddr happyGotoOffsets st
	 off_i  = (off Happy_GHC_Exts.+# nt)
 	 new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (0# is the error token)

-- parse error if we are in recovery and we fail again
happyFail  0# tk old_st _ stk =
--	trace "failing" $ 
    	happyError_ tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  0# tk old_st (HappyCons ((action)) (sts)) 
						(saved_tok `HappyStk` _ `HappyStk` stk) =
--	trace ("discarding state, depth " ++ show (length stk))  $
	happyDoAction 0# tk action sts ((saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail  i tk (action) sts stk =
--      trace "entering error recovery" $
	happyDoAction 0# tk action sts ( (Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll = error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


happyTcHack :: Happy_GHC_Exts.Int# -> a -> a
happyTcHack x y = y
{-# INLINE happyTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--	happySeq = happyDoSeq
-- otherwise it emits
-- 	happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.
