module SimulatePoissonSpikes where

use Prelude 

unifs :: Signal Real
unifs <* uniform (0,1)

t0 = 5
amp = 200
tau1 = 0.3
tau2 = 0.5
tau3 = 0.2
pslow = 0.1
baseline = 0.1

lov = 0.01

approachLoV = [(0,5,lov)]
approachLoV *> store ""

t0Dur = [(0,5,t0)]
t0Dur *> store ""


_tmax = 6
_dt = 0.001

only_pos x = if x > 0 then x else 0

--rate x = only_pos((-(x-t0)/tau)*exp(1+(x-t0)/tau)*(maxRate-baseline))+baseline

--rate x = only_pos((-(x-t0)/tau)*exp(1+(x-t0)/tau))*(maxRate-baseline)+baseline

rate t = let x = (-t-t0) in only_pos(amp*(1-exp(-x/tau1))*((1-pslow)*exp(-x/tau2)+pslow*exp(-x/tau3)))+baseline

rateSig = smap rate seconds

spike = eventIf (<: unifs :> < (rate <: seconds :> * dt ))

rateSig *> store ""

spike *> store ""
